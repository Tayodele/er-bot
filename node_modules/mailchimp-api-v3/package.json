{
  "name": "mailchimp-api-v3",
  "version": "1.7.0",
  "description": "Mailchimp wrapper for v3 of the mailchimp api, with transparant handling of batch operations",
  "main": "index.js",
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "git+https://thorning@github.com/thorning/node-mailchimp.git"
  },
  "keywords": [
    "mailchimp",
    "api",
    "v3",
    "batch",
    "mailchimp api v3",
    "wrapper",
    "mailchimp api"
  ],
  "author": {
    "name": "Andreas Thorning"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/thorning/node-mailchimp/issues"
  },
  "homepage": "https://github.com/thorning/node-mailchimp#readme",
  "dependencies": {
    "bluebird": "^3.4.0",
    "lodash": "^3.10.1",
    "request": "^2.67.0",
    "tar": "^2.2.1"
  },
  "readme": "# node-mailchimp\n\nMailchimp api wrapper for v3 of the mailchimp api, with batch handling. Supports both promise and callback handling.\n\n```javascript\nvar Mailchimp = require('mailchimp-api-v3')\n\nvar mailchimp = new Mailchimp(api_key);\n\n//Callback style\nmailchimp.get({\n  path : '/lists/id1'\n}, function (err, result) {\n  ...\n})\n\n//Promise style\nmailchimp.get({\n  path : '/lists/id1'\n})\n.then(function (result) {\n  ...\n})\n.catch(function (err) {\n  ...\n})\n```\n\nseamless batch calls, with polling and unpacking of results\n\n```javascript\n//Callback style\nmailchimp.batch([\n{\n  method : 'get',\n  path : '/lists/id1'\n},\n{\n  method : 'get',\n  path : '/lists/id2'\n}], function (err, results) {\n  //results[0] same as result in previous example\n})\n\n//Promise style\nmailchimp.batch([\n{\n  method : 'get',\n  path : '/lists/id1'\n},\n{\n  method : 'get',\n  path : '/lists/id2'\n}])\n.then(function (results) {\n  //results[0] same as result in previous example\n})\n.catch(function (err) {\n  ...\n})\n```\n\n## Why\nVersion 3 of the mailchimp api is an excellent RESTful api. This library makes it easy to integrate mailchimp using their own api documentation.\n\nThis library also supports easy usage of the mailchimp batch operations, enabling them to be used just as the standard api calls.\n\n## Installation\n\n`$ npm install mailchimp-api-v3`\n\n## Usage\n\nFor information on the possible calls, refer to the mailchimp api v3 documentation: [http://developer.mailchimp.com/documentation/mailchimp/reference/overview/](http://developer.mailchimp.com/documentation/mailchimp/reference/overview/)\n\n### Promise support\n\nIn all calls you can omit the callback, and a promise will be returned instead.\n\n### Initialization\n\n```javascript\nvar Mailchimp = require('mailchimp-api-v3')\n\nvar mailchimp = new Mailchimp(api_key);\n```\n\n### Standard Calls\n\n```javascript\nmailchimp.request({\n  method : 'get|post|put|patch|delete',\n  path : 'path for the call, see mailchimp documentation for possible calls'\n  path_params : {\n    //path parameters, see mailchimp documentation for each call\n  },\n  body : {\n    //body parameters, see mailchimp documentation for each call\n  },\n  query : {\n    //query string parameters, see mailchimp documentation for each call\n  }\n}, callback)\n```\n\n`path` can be given either exactly as in the mailchimp documentation (`\"/campaigns/{campaign_id}\"`) and `path_params` specifying id values, or as a string with path parameters already substituted, and no `path_params`\n\nFor each request method, convenience calls exists to make common calls:\n\n```javascript\nmailchimp.get(path, [query], [callback])\nmailchimp.post(path, [body], [callback])\nmailchimp.put(path, [body], [callback])\nmailchimp.patch(path, [body], [callback])\nmailchimp.delete(path, [callback])\n```\n\nThis allows shorthand forms like:\n\n```javascript\nmailchimp.get('/lists')\n.then(function(results) {\n  ...\n})\n.catch(function (err) {\n  ...\n})\n\nmailchimp.post('/lists/id', {\n  email_address : '...'\n  ...\n})\n.then(function(results) {\n  ...\n})\n.catch(function (err) {\n  ...\n})\n```\n\n### Batch Calls\n\n```javascript\nvar calls = [\n{\n  method : 'post',\n  path : '/lists/id1/members'\n  body : {\n    email_address : '1@example.com',\n    status : 'subscribed'\n  }\n},\n{\n  method : 'post',\n  path : '/lists/id1/members'\n  body : {\n    email_address : '2@example.com',\n    status : 'subscribed'\n  }\n}]\n\n\nmailchimp.batch(calls, callback, {\n  wait : true,\n  interval : 2000,\n  unpack : true,\n})\n```\n\n`batch` takes an array of call options, exactly as used in the standard call.\n\n* `wait` whether or not to wait for the batch command to finish, defaults to `true`\n* `interval` if `wait` is true, the interval to poll for the status of the batch call, defaults to 2000ms\n* `unpack` if `wait` is true, whether or not to get and unpack the results of the batch operation, and return the response bodies.\n* `verbose` if `wait` is true, whether or not to log progress to the console\n\n#### BatchWait\n\n```javascript\nmailchimp.batchWait(batch_id, callback, {\n  interval : 2000,\n  unpack : true,\n})\n```\n\nIf you call `batch` with `wait : false`, you can use the returned batch id to resume pooling and unpacking the results at a later time.\nThis also allows you to \"reconnect\" to a batch operation after a crash or similar.\n\n#### Single operation batch\n\nIf you pass a single operation, instaed of an array to `batch`, the result will be the same as if you ran the operation without batch.\nThis is very useful if you want to make calls without paging, where a normal call would take to long, and likely time out.\n\n```javascript\nmailchimp.batch({\n  method : 'get',\n  path : '/lists/id/members',\n  query : {\n    count  : 10000000000,\n  }\n}, function (err, result) {\n  //result is the same as a normal .get request\n})\n```",
  "readmeFilename": "README.md",
  "_id": "mailchimp-api-v3@1.7.0",
  "dist": {
    "shasum": "fca8581d1cbfed6bef898318fffa7e8b2c7737fd"
  },
  "_from": "mailchimp-api-v3@",
  "_resolved": "https://registry.npmjs.org/mailchimp-api-v3/-/mailchimp-api-v3-1.7.0.tgz"
}
